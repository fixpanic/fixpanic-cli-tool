name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'v0.1.0'

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Build binaries
        run: |
          # Create release directory
          mkdir -p release
          
          # Build for multiple platforms
          platforms=(
            "linux amd64"
            "linux arm64"
            "linux 386"
            "linux arm"
            "darwin amd64"
            "darwin arm64"
            "windows amd64"
          )
          
          for platform in "${platforms[@]}"; do
            platform_split=($platform)
            GOOS=${platform_split[0]}
            GOARCH=${platform_split[1]}
            
            output_name="fixpanic-${GOOS}-${GOARCH}"
            if [ "$GOOS" = "windows" ]; then
              output_name="${output_name}.exe"
            fi
            
            echo "Building for $GOOS/$GOARCH..."
            env GOOS=$GOOS GOARCH=$GOARCH go build \
              -ldflags "-X main.version=${{ steps.version.outputs.version }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -o "release/${output_name}" \
              main.go
            
            # Create tar.gz for Unix systems
            if [ "$GOOS" != "windows" ]; then
              tar -czf "release/${output_name}.tar.gz" -C release "${output_name}"
              rm "release/${output_name}"
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: release/*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: release/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: Fixpanic CLI ${{ needs.build.outputs.version }}
          body: |
            ## Fixpanic CLI ${{ needs.build.outputs.version }}
            
            ### Installation
            Download the appropriate binary for your platform and extract it to your PATH.
            
            ### Quick Install
            ```bash
            curl -fsSL https://get.fixpanic.com/install.sh | bash
            ```
            
            ### Manual Installation
            1. Download the binary for your platform
            2. Extract the archive
            3. Move the binary to your PATH
            4. Make it executable
            
            ### What's New
            See the [changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ### Supported Platforms
            - Linux (amd64, arm64, 386, arm)
            - macOS (amd64, arm64)
            - Windows (amd64)
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/
          asset_name: fixpanic-binaries.zip
          asset_content_type: application/zip

  docker:
    name: Build Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            fixpanic/fixpanic-cli:latest
            fixpanic/fixpanic-cli:${{ needs.build.outputs.version }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.build.outputs.version }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}

  notify:
    name: Notify Release
    needs: [build, release, docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üéâ Fixpanic CLI ${{ needs.build.outputs.version }} released successfully!
            
            üì¶ Binaries: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build.outputs.version }}
            üê≥ Docker: fixpanic/fixpanic-cli:${{ needs.build.outputs.version }}
            üìñ Docs: https://github.com/${{ github.repository }}/blob/main/README.md
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}